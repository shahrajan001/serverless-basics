service: OSP-backend

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    userTableName: ${self:custom.userTableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
        - sns:*
      Resource: '*'
  # apiKeys:
  #     - free:
  #         - OSPComplimentaryApiKey
      # - paid:
      #     - OSPPremiumApiKey
      #     - user2PaidKey

  # usagePlan:
  #     - free:
  #       quota: 
  #           limit: 1000
  #           period: MONTH
  #       throttle:
  #           rateLimit: 5
  #           burstLimit: 20
      # - paid:
      #     quota: 
      #         limit: 10000
      #         period: MONTH
      #     throttle:
      #         rateLimit: 50
      #         burstLimit: 200
# There are no errors above this
# plugins:
#   - serverless-webpack
  # - serverless-s3-sync 

package:
  # individually: true
  exclude:
    - node_modules/**
    
custom:
  userTableName: OSP-backend-UserTable-${opt:stage}
  bucketName: osp-appsync-backend-upload-${opt:stage}
  # s3Sync:
    # - bucketName : ospbucketupload-001
      # localDir: ./uploadData

functions:
  getUser:
    handler: functions/endpoints/getUserDetails.handler
    events:
      - http:
          path: get-user-details/{ID}
          method: GET
          cors: true
          private: true

  createUser:    
    handler: functions/endpoints/createUser.handler 
    events:
      - http:
          path: create-user/{ID}
          method: POST
          cors: true

  createFile:    
    handler: functions/endpoints/createFile.handler 
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true

  getFile:    
    handler: functions/endpoints/getFile.handler 
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  
  sendEmail:    
    handler: functions/endpoints/sendEmail.handler 
    events:
      - http:
          path: sendEmail
          method: POST
          cors: true

  sendSMS:    
    handler: functions/endpoints/sendSMS.handler 
    events:
      - http:
          path: sendSMS
          method: POST
          cors: true

  # proxy:
  #   handler: functions/endpoints/proxy.handler
  #   events:
  #     - http:
  #         path: chuck-norris/{proxy+}
  #         method: ANY
  #         integration: http-proxy
  #         request:
  #           uri: http://api.icndb.com/{proxy}
  #           parameters:
  #             paths: 
  #               proxy: true

#    If your web page makes an HTTP request to a different domain than you're currently on, it needs to be CORS-friendly.          

resources:
 Resources:
    OSPBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    
    OSPDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnit